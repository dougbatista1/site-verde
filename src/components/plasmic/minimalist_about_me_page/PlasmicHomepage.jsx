// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oce5ZRVHW91fZTpkWkQL2L
// Component: oJmq6gQ58yKv2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CopyableLink from "../../CopyableLink"; // plasmic-import: zEk1rh8OncWL4/component
import { useScreenVariants as useScreenVariants_3T0S6A7IUNqsZ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3T0S6a7iUNqsZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: oce5ZRVHW91fZTpkWkQL2L/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: oJmq6gQ58yKv2/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 4zdpopM1msaS2/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: M2ZJjg_tG_CGY/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: JNxDhOPgp5xhu/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3T0S6A7IUNqsZ()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fey25)}>
            <div className={classNames(projectcss.all, sty.freeBox__h2G8I)} />
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fidSg)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__e69)}>
                <div className={classNames(projectcss.all, sty.freeBox__rcmqe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pDhxz
                    )}
                  >
                    {"Anna Wu"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__td8Vo
                    )}
                  >
                    {
                      "Building things for building things.\nDesign and code at Plasmic."
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__k5MIn)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dv5N1
                  )}
                >
                  {" "}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gtbj5)}>
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"aw@gmail.com"}
                  </CopyableLink>
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vt7Jv)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qNzeX)}
                  >
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__lsamW
                      )}
                      href={"https://www.twitter.com"}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___9E9Kf)}
                        role={"img"}
                      />
                    </a>
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__b68KY
                      )}
                      href={"https://www.dribbble.com"}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__dv6Nk)}
                        role={"img"}
                      />
                    </a>
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__sind4
                      )}
                      href={"https://www.github.com"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__pfEf9)}
                        role={"img"}
                      />
                    </a>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
            <div className={classNames(projectcss.all, sty.freeBox__vbN4D)} />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "copyableLink"],
  copyableLink: ["copyableLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
